/*
 * This file is generated by jOOQ.
 */
package ch.michu.tech.swissbudget.generated.jooq.tables;


import ch.michu.tech.swissbudget.generated.jooq.Keys;
import ch.michu.tech.swissbudget.generated.jooq.Public;
import ch.michu.tech.swissbudget.generated.jooq.tables.records.TransactionTagDuplicateRecord;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TransactionTagDuplicate extends TableImpl<TransactionTagDuplicateRecord> {

    /**
     * The reference instance of <code>public.transaction_tag_duplicate</code>
     */
    public static final TransactionTagDuplicate TRANSACTION_TAG_DUPLICATE = new TransactionTagDuplicate();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>public.transaction_tag_duplicate.id</code>.
     */
    public final TableField<TransactionTagDuplicateRecord, Integer> ID = createField(DSL.name("id"),
        SQLDataType.INTEGER.nullable(false).identity(true), this, "");
    /**
     * The column <code>public.transaction_tag_duplicate.transaction_id</code>.
     */
    public final TableField<TransactionTagDuplicateRecord, String> TRANSACTION_ID = createField(DSL.name("transaction_id"),
        SQLDataType.VARCHAR(250).nullable(false), this, "");
    /**
     * The column <code>public.transaction_tag_duplicate.tag_id</code>.
     */
    public final TableField<TransactionTagDuplicateRecord, Integer> TAG_ID = createField(DSL.name("tag_id"),
        SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column
     * <code>public.transaction_tag_duplicate.matching_keyword_id</code>.
     */
    public final TableField<TransactionTagDuplicateRecord, Integer> MATCHING_KEYWORD_ID = createField(DSL.name("matching_keyword_id"),
        SQLDataType.INTEGER.nullable(false), this, "");
    private transient Transaction _transaction;
    private transient Tag _tag;
    private transient Keyword _keyword;

    private TransactionTagDuplicate(Name alias, Table<TransactionTagDuplicateRecord> aliased) {
        this(alias, aliased, null);
    }

    private TransactionTagDuplicate(Name alias, Table<TransactionTagDuplicateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.transaction_tag_duplicate</code> table reference
     */
    public TransactionTagDuplicate(String alias) {
        this(DSL.name(alias), TRANSACTION_TAG_DUPLICATE);
    }

    /**
     * Create an aliased <code>public.transaction_tag_duplicate</code> table reference
     */
    public TransactionTagDuplicate(Name alias) {
        this(alias, TRANSACTION_TAG_DUPLICATE);
    }

    /**
     * Create a <code>public.transaction_tag_duplicate</code> table reference
     */
    public TransactionTagDuplicate() {
        this(DSL.name("transaction_tag_duplicate"), null);
    }

    public <O extends Record> TransactionTagDuplicate(Table<O> child, ForeignKey<O, TransactionTagDuplicateRecord> key) {
        super(child, key, TRANSACTION_TAG_DUPLICATE);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionTagDuplicateRecord> getRecordType() {
        return TransactionTagDuplicateRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TransactionTagDuplicateRecord, Integer> getIdentity() {
        return (Identity<TransactionTagDuplicateRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TransactionTagDuplicateRecord> getPrimaryKey() {
        return Keys.TRANSACTION_TAG_DUPLICATE_PKEY;
    }

    @Override
    public List<ForeignKey<TransactionTagDuplicateRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRANSACTION_TAG_DUPLICATE__TRANSACTION_TAG_DUPLICATE_TRANSACTION_ID_FKEY,
            Keys.TRANSACTION_TAG_DUPLICATE__TRANSACTION_TAG_DUPLICATE_TAG_ID_FKEY,
            Keys.TRANSACTION_TAG_DUPLICATE__TRANSACTION_TAG_DUPLICATE_MATCHING_KEYWORD_ID_FKEY);
    }

    /**
     * Get the implicit join path to the <code>public.transaction</code> table.
     */
    public Transaction transaction() {
        if (_transaction == null) {
            _transaction = new Transaction(this, Keys.TRANSACTION_TAG_DUPLICATE__TRANSACTION_TAG_DUPLICATE_TRANSACTION_ID_FKEY);
        }

        return _transaction;
    }

    /**
     * Get the implicit join path to the <code>public.tag</code> table.
     */
    public Tag tag() {
        if (_tag == null) {
            _tag = new Tag(this, Keys.TRANSACTION_TAG_DUPLICATE__TRANSACTION_TAG_DUPLICATE_TAG_ID_FKEY);
        }

        return _tag;
    }

    /**
     * Get the implicit join path to the <code>public.keyword</code> table.
     */
    public Keyword keyword() {
        if (_keyword == null) {
            _keyword = new Keyword(this, Keys.TRANSACTION_TAG_DUPLICATE__TRANSACTION_TAG_DUPLICATE_MATCHING_KEYWORD_ID_FKEY);
        }

        return _keyword;
    }

    @Override
    public TransactionTagDuplicate as(String alias) {
        return new TransactionTagDuplicate(DSL.name(alias), this);
    }

    @Override
    public TransactionTagDuplicate as(Name alias) {
        return new TransactionTagDuplicate(alias, this);
    }

    @Override
    public TransactionTagDuplicate as(Table<?> alias) {
        return new TransactionTagDuplicate(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionTagDuplicate rename(String name) {
        return new TransactionTagDuplicate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionTagDuplicate rename(Name name) {
        return new TransactionTagDuplicate(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionTagDuplicate rename(Table<?> name) {
        return new TransactionTagDuplicate(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType,
        Function4<? super Integer, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
