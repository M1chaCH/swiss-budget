/*
 * This file is generated by jOOQ.
 */
package ch.michu.tech.swissbudget.generated.jooq.tables;


import ch.michu.tech.swissbudget.generated.jooq.Keys;
import ch.michu.tech.swissbudget.generated.jooq.Public;
import ch.michu.tech.swissbudget.generated.jooq.tables.records.SessionsRecord;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Sessions extends TableImpl<SessionsRecord> {

    /**
     * The reference instance of <code>public.sessions</code>
     */
    public static final Sessions SESSIONS = new Sessions();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>public.sessions.id</code>.
     */
    public final TableField<SessionsRecord, Integer> ID = createField(DSL.name("id"),
        SQLDataType.INTEGER.nullable(false).identity(true), this, "");
    /**
     * The column <code>public.sessions.session_id</code>.
     */
    public final TableField<SessionsRecord, String> SESSION_ID = createField(DSL.name("session_id"),
        SQLDataType.VARCHAR(50).nullable(false), this, "");
    /**
     * The column <code>public.sessions.user_id</code>.
     */
    public final TableField<SessionsRecord, Integer> USER_ID = createField(DSL.name("user_id"),
        SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>public.sessions.user_agent</code>.
     */
    public final TableField<SessionsRecord, String> USER_AGENT = createField(DSL.name("user_agent"),
        SQLDataType.VARCHAR(250).nullable(false), this, "");
    /**
     * The column <code>public.sessions.remote_address</code>.
     */
    public final TableField<SessionsRecord, String> REMOTE_ADDRESS = createField(
        DSL.name("remote_address"), SQLDataType.VARCHAR(20).nullable(false), this, "");
    private transient Users _users;

    private Sessions(Name alias, Table<SessionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sessions(Name alias, Table<SessionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sessions</code> table reference
     */
    public Sessions(String alias) {
        this(DSL.name(alias), SESSIONS);
    }

    /**
     * Create an aliased <code>public.sessions</code> table reference
     */
    public Sessions(Name alias) {
        this(alias, SESSIONS);
    }

    /**
     * Create a <code>public.sessions</code> table reference
     */
    public Sessions() {
        this(DSL.name("sessions"), null);
    }

    public <O extends Record> Sessions(Table<O> child, ForeignKey<O, SessionsRecord> key) {
        super(child, key, SESSIONS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SessionsRecord> getRecordType() {
        return SessionsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<SessionsRecord, Integer> getIdentity() {
        return (Identity<SessionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SessionsRecord> getPrimaryKey() {
        return Keys.SESSIONS_PKEY;
    }

    @Override
    public List<UniqueKey<SessionsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SESSIONS_SESSION_ID_KEY, Keys.SESSIONS_USER_ID_KEY);
    }

    @Override
    public List<ForeignKey<SessionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SESSIONS__SESSIONS_USER_ID_FKEY);
    }

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null) {
            _users = new Users(this, Keys.SESSIONS__SESSIONS_USER_ID_FKEY);
        }

        return _users;
    }

    @Override
    public Sessions as(String alias) {
        return new Sessions(DSL.name(alias), this);
    }

    @Override
    public Sessions as(Name alias) {
        return new Sessions(alias, this);
    }

    @Override
    public Sessions as(Table<?> alias) {
        return new Sessions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sessions rename(String name) {
        return new Sessions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sessions rename(Name name) {
        return new Sessions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sessions rename(Table<?> name) {
        return new Sessions(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Integer, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(
        Function5<? super Integer, ? super String, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType,
        Function5<? super Integer, ? super String, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
