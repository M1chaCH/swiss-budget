/*
 * This file is generated by jOOQ.
 */
package ch.michu.tech.swissbudget.generated.jooq;


import ch.michu.tech.swissbudget.generated.jooq.tables.Keyword;
import ch.michu.tech.swissbudget.generated.jooq.tables.RegisteredUser;
import ch.michu.tech.swissbudget.generated.jooq.tables.Session;
import ch.michu.tech.swissbudget.generated.jooq.tables.Tag;
import ch.michu.tech.swissbudget.generated.jooq.tables.Transaction;
import ch.michu.tech.swissbudget.generated.jooq.tables.TransactionMail;
import ch.michu.tech.swissbudget.generated.jooq.tables.records.KeywordRecord;
import ch.michu.tech.swissbudget.generated.jooq.tables.records.RegisteredUserRecord;
import ch.michu.tech.swissbudget.generated.jooq.tables.records.SessionRecord;
import ch.michu.tech.swissbudget.generated.jooq.tables.records.TagRecord;
import ch.michu.tech.swissbudget.generated.jooq.tables.records.TransactionMailRecord;
import ch.michu.tech.swissbudget.generated.jooq.tables.records.TransactionRecord;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in public.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<KeywordRecord> KEYWORD_PKEY = Internal.createUniqueKey(
        Keyword.KEYWORD, DSL.name("keyword_pkey"), new TableField[]{Keyword.KEYWORD.ID}, true);
    public static final UniqueKey<RegisteredUserRecord> REGISTERED_USER_MAIL_KEY = Internal.createUniqueKey(
        RegisteredUser.REGISTERED_USER, DSL.name("registered_user_mail_key"),
        new TableField[]{RegisteredUser.REGISTERED_USER.MAIL}, true);
    public static final UniqueKey<RegisteredUserRecord> REGISTERED_USER_PKEY = Internal.createUniqueKey(
        RegisteredUser.REGISTERED_USER, DSL.name("registered_user_pkey"),
        new TableField[]{RegisteredUser.REGISTERED_USER.ID}, true);
    public static final UniqueKey<SessionRecord> SESSION_PKEY = Internal.createUniqueKey(
        Session.SESSION, DSL.name("session_pkey"), new TableField[]{Session.SESSION.ID}, true);
    public static final UniqueKey<SessionRecord> SESSION_SESSION_TOKEN_KEY = Internal.createUniqueKey(
        Session.SESSION, DSL.name("session_session_token_key"),
        new TableField[]{Session.SESSION.SESSION_TOKEN}, true);
    public static final UniqueKey<SessionRecord> SESSION_USER_ID_KEY = Internal.createUniqueKey(
        Session.SESSION, DSL.name("session_user_id_key"), new TableField[]{Session.SESSION.USER_ID},
        true);
    public static final UniqueKey<TagRecord> TAG_PKEY = Internal.createUniqueKey(Tag.TAG,
        DSL.name("tag_pkey"), new TableField[]{Tag.TAG.ID}, true);
    public static final UniqueKey<TransactionRecord> TRANSACTION_PKEY = Internal.createUniqueKey(
        Transaction.TRANSACTION, DSL.name("transaction_pkey"),
        new TableField[]{Transaction.TRANSACTION.ID}, true);
    public static final UniqueKey<TransactionMailRecord> TRANSACTION_MAIL_PKEY = Internal.createUniqueKey(
        TransactionMail.TRANSACTION_MAIL, DSL.name("transaction_mail_pkey"),
        new TableField[]{TransactionMail.TRANSACTION_MAIL.ID}, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<KeywordRecord, TagRecord> KEYWORD__KEYWORD_TAG_ID_FKEY = Internal.createForeignKey(
        Keyword.KEYWORD, DSL.name("keyword_tag_id_fkey"), new TableField[]{Keyword.KEYWORD.TAG_ID},
        Keys.TAG_PKEY, new TableField[]{Tag.TAG.ID}, true);
    public static final ForeignKey<SessionRecord, RegisteredUserRecord> SESSION__SESSION_USER_ID_FKEY = Internal.createForeignKey(
        Session.SESSION, DSL.name("session_user_id_fkey"),
        new TableField[]{Session.SESSION.USER_ID}, Keys.REGISTERED_USER_PKEY,
        new TableField[]{RegisteredUser.REGISTERED_USER.ID}, true);
    public static final ForeignKey<TransactionRecord, KeywordRecord> TRANSACTION__TRANSACTION_MATCHING_KEYWORD_ID_FKEY = Internal.createForeignKey(
        Transaction.TRANSACTION, DSL.name("transaction_matching_keyword_id_fkey"),
        new TableField[]{Transaction.TRANSACTION.MATCHING_KEYWORD_ID}, Keys.KEYWORD_PKEY,
        new TableField[]{Keyword.KEYWORD.ID}, true);
    public static final ForeignKey<TransactionRecord, TagRecord> TRANSACTION__TRANSACTION_TAG_ID_FKEY = Internal.createForeignKey(
        Transaction.TRANSACTION, DSL.name("transaction_tag_id_fkey"),
        new TableField[]{Transaction.TRANSACTION.TAG_ID}, Keys.TAG_PKEY,
        new TableField[]{Tag.TAG.ID}, true);
    public static final ForeignKey<TransactionMailRecord, TransactionRecord> TRANSACTION_MAIL__TRANSACTION_MAIL_TRANSACTION_ID_FKEY = Internal.createForeignKey(
        TransactionMail.TRANSACTION_MAIL, DSL.name("transaction_mail_transaction_id_fkey"),
        new TableField[]{TransactionMail.TRANSACTION_MAIL.TRANSACTION_ID}, Keys.TRANSACTION_PKEY,
        new TableField[]{Transaction.TRANSACTION.ID}, true);
}
