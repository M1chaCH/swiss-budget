/*
 * This file is generated by jOOQ.
 */
package ch.michu.tech.swissbudget.generated.jooq.tables;


import ch.michu.tech.swissbudget.generated.jooq.Keys;
import ch.michu.tech.swissbudget.generated.jooq.Public;
import ch.michu.tech.swissbudget.generated.jooq.tables.records.TransactionsRecord;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Transactions extends TableImpl<TransactionsRecord> {

    /**
     * The reference instance of <code>public.transactions</code>
     */
    public static final Transactions TRANSACTIONS = new Transactions();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>public.transactions.id</code>.
     */
    public final TableField<TransactionsRecord, Integer> ID = createField(DSL.name("id"),
        SQLDataType.INTEGER.nullable(false).identity(true), this, "");
    /**
     * The column <code>public.transactions.expense</code>.
     */
    public final TableField<TransactionsRecord, Boolean> EXPENSE = createField(DSL.name("expense"),
        SQLDataType.BOOLEAN.nullable(false), this, "");
    /**
     * The column <code>public.transactions.transaction_date</code>.
     */
    public final TableField<TransactionsRecord, LocalDate> TRANSACTION_DATE = createField(
        DSL.name("transaction_date"), SQLDataType.LOCALDATE.nullable(false), this, "");
    /**
     * The column <code>public.transactions.bankaccount</code>.
     */
    public final TableField<TransactionsRecord, String> BANKACCOUNT = createField(
        DSL.name("bankaccount"), SQLDataType.VARCHAR(250).nullable(false), this, "");
    /**
     * The column <code>public.transactions.amount</code>.
     */
    public final TableField<TransactionsRecord, Double> AMOUNT = createField(DSL.name("amount"),
        SQLDataType.DOUBLE.nullable(false), this, "");
    /**
     * The column <code>public.transactions.receiver</code>.
     */
    public final TableField<TransactionsRecord, String> RECEIVER = createField(DSL.name("receiver"),
        SQLDataType.VARCHAR(250).nullable(false), this, "");
    /**
     * The column <code>public.transactions.tag_id</code>.
     */
    public final TableField<TransactionsRecord, Integer> TAG_ID = createField(DSL.name("tag_id"),
        SQLDataType.INTEGER, this, "");
    /**
     * The column <code>public.transactions.matching_keyword_id</code>.
     */
    public final TableField<TransactionsRecord, Integer> MATCHING_KEYWORD_ID = createField(
        DSL.name("matching_keyword_id"), SQLDataType.INTEGER, this, "");
    /**
     * The column <code>public.transactions.alias</code>.
     */
    public final TableField<TransactionsRecord, String> ALIAS = createField(DSL.name("alias"),
        SQLDataType.VARCHAR(250), this, "");
    /**
     * The column <code>public.transactions.note</code>.
     */
    public final TableField<TransactionsRecord, String> NOTE = createField(DSL.name("note"),
        SQLDataType.VARCHAR(250), this, "");
    /**
     * The column <code>public.transactions.user_id</code>.
     */
    public final TableField<TransactionsRecord, Integer> USER_ID = createField(DSL.name("user_id"),
        SQLDataType.INTEGER.nullable(false), this, "");
    private transient Tags _tags;
    private transient Keywords _keywords;
    private transient Users _users;

    private Transactions(Name alias, Table<TransactionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transactions(Name alias, Table<TransactionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.transactions</code> table reference
     */
    public Transactions(String alias) {
        this(DSL.name(alias), TRANSACTIONS);
    }

    /**
     * Create an aliased <code>public.transactions</code> table reference
     */
    public Transactions(Name alias) {
        this(alias, TRANSACTIONS);
    }

    /**
     * Create a <code>public.transactions</code> table reference
     */
    public Transactions() {
        this(DSL.name("transactions"), null);
    }

    public <O extends Record> Transactions(Table<O> child, ForeignKey<O, TransactionsRecord> key) {
        super(child, key, TRANSACTIONS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionsRecord> getRecordType() {
        return TransactionsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TransactionsRecord, Integer> getIdentity() {
        return (Identity<TransactionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TransactionsRecord> getPrimaryKey() {
        return Keys.TRANSACTIONS_PKEY;
    }

    @Override
    public List<ForeignKey<TransactionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRANSACTIONS__TRANSACTIONS_TAG_ID_FKEY,
            Keys.TRANSACTIONS__TRANSACTIONS_MATCHING_KEYWORD_ID_FKEY,
            Keys.TRANSACTIONS__TRANSACTIONS_USER_ID_FKEY);
    }

    /**
     * Get the implicit join path to the <code>public.tags</code> table.
     */
    public Tags tags() {
        if (_tags == null) {
            _tags = new Tags(this, Keys.TRANSACTIONS__TRANSACTIONS_TAG_ID_FKEY);
        }

        return _tags;
    }

    /**
     * Get the implicit join path to the <code>public.keywords</code> table.
     */
    public Keywords keywords() {
        if (_keywords == null) {
            _keywords = new Keywords(this,
                Keys.TRANSACTIONS__TRANSACTIONS_MATCHING_KEYWORD_ID_FKEY);
        }

        return _keywords;
    }

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null) {
            _users = new Users(this, Keys.TRANSACTIONS__TRANSACTIONS_USER_ID_FKEY);
        }

        return _users;
    }

    @Override
    public List<Check<TransactionsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("transactions_amount_check"),
                "((amount > (0)::double precision))", true)
        );
    }

    @Override
    public Transactions as(String alias) {
        return new Transactions(DSL.name(alias), this);
    }

    @Override
    public Transactions as(Name alias) {
        return new Transactions(alias, this);
    }

    @Override
    public Transactions as(Table<?> alias) {
        return new Transactions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(String name) {
        return new Transactions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(Name name) {
        return new Transactions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(Table<?> name) {
        return new Transactions(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, Boolean, LocalDate, String, Double, String, Integer, Integer, String, String, Integer> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(
        Function11<? super Integer, ? super Boolean, ? super LocalDate, ? super String, ? super Double, ? super String, ? super Integer, ? super Integer, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType,
        Function11<? super Integer, ? super Boolean, ? super LocalDate, ? super String, ? super Double, ? super String, ? super Integer, ? super Integer, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
