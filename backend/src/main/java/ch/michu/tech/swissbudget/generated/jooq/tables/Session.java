/*
 * This file is generated by jOOQ.
 */
package ch.michu.tech.swissbudget.generated.jooq.tables;


import ch.michu.tech.swissbudget.generated.jooq.Keys;
import ch.michu.tech.swissbudget.generated.jooq.Public;
import ch.michu.tech.swissbudget.generated.jooq.tables.records.SessionRecord;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Session extends TableImpl<SessionRecord> {

    /**
     * The reference instance of <code>public.session</code>
     */
    public static final Session SESSION = new Session();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>public.session.id</code>.
     */
    public final TableField<SessionRecord, Integer> ID = createField(DSL.name("id"),
        SQLDataType.INTEGER.nullable(false).identity(true), this, "");
    /**
     * The column <code>public.session.session_token</code>.
     */
    public final TableField<SessionRecord, String> SESSION_TOKEN = createField(
        DSL.name("session_token"), SQLDataType.VARCHAR(50).nullable(false), this, "");
    /**
     * The column <code>public.session.created_at</code>.
     */
    public final TableField<SessionRecord, LocalDateTime> CREATED_AT = createField(
        DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false)
            .defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");
    /**
     * The column <code>public.session.user_id</code>.
     */
    public final TableField<SessionRecord, Integer> USER_ID = createField(DSL.name("user_id"),
        SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>public.session.user_agent</code>.
     */
    public final TableField<SessionRecord, String> USER_AGENT = createField(DSL.name("user_agent"),
        SQLDataType.VARCHAR(250).nullable(false), this, "");
    /**
     * The column <code>public.session.remote_address</code>.
     */
    public final TableField<SessionRecord, String> REMOTE_ADDRESS = createField(
        DSL.name("remote_address"), SQLDataType.VARCHAR(50).nullable(false), this, "");
    /**
     * The column <code>public.session.stay</code>.
     */
    public final TableField<SessionRecord, Boolean> STAY = createField(DSL.name("stay"),
        SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)),
        this, "");
    private transient RegisteredUser _registeredUser;

    private Session(Name alias, Table<SessionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Session(Name alias, Table<SessionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.session</code> table reference
     */
    public Session(String alias) {
        this(DSL.name(alias), SESSION);
    }

    /**
     * Create an aliased <code>public.session</code> table reference
     */
    public Session(Name alias) {
        this(alias, SESSION);
    }

    /**
     * Create a <code>public.session</code> table reference
     */
    public Session() {
        this(DSL.name("session"), null);
    }

    public <O extends Record> Session(Table<O> child, ForeignKey<O, SessionRecord> key) {
        super(child, key, SESSION);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SessionRecord> getRecordType() {
        return SessionRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<SessionRecord, Integer> getIdentity() {
        return (Identity<SessionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SessionRecord> getPrimaryKey() {
        return Keys.SESSION_PKEY;
    }

    @Override
    public List<UniqueKey<SessionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SESSION_SESSION_TOKEN_KEY, Keys.SESSION_USER_ID_KEY);
    }

    @Override
    public List<ForeignKey<SessionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SESSION__SESSION_USER_ID_FKEY);
    }

    /**
     * Get the implicit join path to the <code>public.registered_user</code> table.
     */
    public RegisteredUser registeredUser() {
        if (_registeredUser == null) {
            _registeredUser = new RegisteredUser(this, Keys.SESSION__SESSION_USER_ID_FKEY);
        }

        return _registeredUser;
    }

    @Override
    public Session as(String alias) {
        return new Session(DSL.name(alias), this);
    }

    @Override
    public Session as(Name alias) {
        return new Session(alias, this);
    }

    @Override
    public Session as(Table<?> alias) {
        return new Session(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Session rename(String name) {
        return new Session(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Session rename(Name name) {
        return new Session(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Session rename(Table<?> name) {
        return new Session(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, LocalDateTime, Integer, String, String, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(
        Function7<? super Integer, ? super String, ? super LocalDateTime, ? super Integer, ? super String, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType,
        Function7<? super Integer, ? super String, ? super LocalDateTime, ? super Integer, ? super String, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
