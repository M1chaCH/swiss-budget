/*
 * This file is generated by jOOQ.
 */
package ch.michu.tech.swissbudget.generated.jooq.tables.records;


import ch.michu.tech.swissbudget.generated.jooq.tables.Transaction;
import java.time.LocalDate;
import java.util.UUID;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record12;
import org.jooq.Row12;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class TransactionRecord extends UpdatableRecordImpl<TransactionRecord> implements
    Record12<UUID, Boolean, LocalDate, String, Double, String, UUID, UUID, Boolean, String, String, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Create a detached TransactionRecord
     */
    public TransactionRecord() {
        super(Transaction.TRANSACTION);
    }

    /**
     * Create a detached, initialised TransactionRecord
     */
    public TransactionRecord(UUID id, Boolean expense, LocalDate transactionDate, String bankaccount, Double amount, String receiver,
        UUID tagId, UUID matchingKeywordId, Boolean needUserAttention, String alias, String note, UUID userId) {
        super(Transaction.TRANSACTION);

        setId(id);
        setExpense(expense);
        setTransactionDate(transactionDate);
        setBankaccount(bankaccount);
        setAmount(amount);
        setReceiver(receiver);
        setTagId(tagId);
        setMatchingKeywordId(matchingKeywordId);
        setNeedUserAttention(needUserAttention);
        setAlias(alias);
        setNote(note);
        setUserId(userId);
        resetChangedOnNotNull();
    }

    /**
     * Getter for <code>public.transaction.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.transaction.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.transaction.expense</code>.
     */
    public Boolean getExpense() {
        return (Boolean) get(1);
    }

    /**
     * Setter for <code>public.transaction.expense</code>.
     */
    public void setExpense(Boolean value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.transaction.transaction_date</code>.
     */
    public LocalDate getTransactionDate() {
        return (LocalDate) get(2);
    }

    /**
     * Setter for <code>public.transaction.transaction_date</code>.
     */
    public void setTransactionDate(LocalDate value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.transaction.bankaccount</code>.
     */
    public String getBankaccount() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.transaction.bankaccount</code>.
     */
    public void setBankaccount(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.transaction.amount</code>.
     */
    public Double getAmount() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>public.transaction.amount</code>.
     */
    public void setAmount(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.transaction.receiver</code>.
     */
    public String getReceiver() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.transaction.receiver</code>.
     */
    public void setReceiver(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.transaction.tag_id</code>.
     */
    public UUID getTagId() {
        return (UUID) get(6);
    }

    /**
     * Setter for <code>public.transaction.tag_id</code>.
     */
    public void setTagId(UUID value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.transaction.matching_keyword_id</code>.
     */
    public UUID getMatchingKeywordId() {
        return (UUID) get(7);
    }

    /**
     * Setter for <code>public.transaction.matching_keyword_id</code>.
     */
    public void setMatchingKeywordId(UUID value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.transaction.need_user_attention</code>.
     */
    public Boolean getNeedUserAttention() {
        return (Boolean) get(8);
    }

    /**
     * Setter for <code>public.transaction.need_user_attention</code>.
     */
    public void setNeedUserAttention(Boolean value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.transaction.alias</code>.
     */
    public String getAlias() {
        return (String) get(9);
    }

    /**
     * Setter for <code>public.transaction.alias</code>.
     */
    public void setAlias(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.transaction.note</code>.
     */
    public String getNote() {
        return (String) get(10);
    }

    /**
     * Setter for <code>public.transaction.note</code>.
     */
    public void setNote(String value) {
        set(10, value);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * Getter for <code>public.transaction.user_id</code>.
     */
    public UUID getUserId() {
        return (UUID) get(11);
    }

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    /**
     * Setter for <code>public.transaction.user_id</code>.
     */
    public void setUserId(UUID value) {
        set(11, value);
    }

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    @Override
    public Row12<UUID, Boolean, LocalDate, String, Double, String, UUID, UUID, Boolean, String, String, UUID> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    @Override
    public Row12<UUID, Boolean, LocalDate, String, Double, String, UUID, UUID, Boolean, String, String, UUID> valuesRow() {
        return (Row12) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Transaction.TRANSACTION.ID;
    }

    @Override
    public Field<Boolean> field2() {
        return Transaction.TRANSACTION.EXPENSE;
    }

    @Override
    public Field<LocalDate> field3() {
        return Transaction.TRANSACTION.TRANSACTION_DATE;
    }

    @Override
    public Field<String> field4() {
        return Transaction.TRANSACTION.BANKACCOUNT;
    }

    @Override
    public Field<Double> field5() {
        return Transaction.TRANSACTION.AMOUNT;
    }

    @Override
    public Field<String> field6() {
        return Transaction.TRANSACTION.RECEIVER;
    }

    @Override
    public Field<UUID> field7() {
        return Transaction.TRANSACTION.TAG_ID;
    }

    @Override
    public Field<UUID> field8() {
        return Transaction.TRANSACTION.MATCHING_KEYWORD_ID;
    }

    @Override
    public Field<Boolean> field9() {
        return Transaction.TRANSACTION.NEED_USER_ATTENTION;
    }

    @Override
    public Field<String> field10() {
        return Transaction.TRANSACTION.ALIAS;
    }

    @Override
    public Field<String> field11() {
        return Transaction.TRANSACTION.NOTE;
    }

    @Override
    public Field<UUID> field12() {
        return Transaction.TRANSACTION.USER_ID;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public Boolean component2() {
        return getExpense();
    }

    @Override
    public LocalDate component3() {
        return getTransactionDate();
    }

    @Override
    public String component4() {
        return getBankaccount();
    }

    @Override
    public Double component5() {
        return getAmount();
    }

    @Override
    public String component6() {
        return getReceiver();
    }

    @Override
    public UUID component7() {
        return getTagId();
    }

    @Override
    public UUID component8() {
        return getMatchingKeywordId();
    }

    @Override
    public Boolean component9() {
        return getNeedUserAttention();
    }

    @Override
    public String component10() {
        return getAlias();
    }

    @Override
    public String component11() {
        return getNote();
    }

    @Override
    public UUID component12() {
        return getUserId();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public Boolean value2() {
        return getExpense();
    }

    @Override
    public LocalDate value3() {
        return getTransactionDate();
    }

    @Override
    public String value4() {
        return getBankaccount();
    }

    @Override
    public Double value5() {
        return getAmount();
    }

    @Override
    public String value6() {
        return getReceiver();
    }

    @Override
    public UUID value7() {
        return getTagId();
    }

    @Override
    public UUID value8() {
        return getMatchingKeywordId();
    }

    @Override
    public Boolean value9() {
        return getNeedUserAttention();
    }

    @Override
    public String value10() {
        return getAlias();
    }

    @Override
    public String value11() {
        return getNote();
    }

    @Override
    public UUID value12() {
        return getUserId();
    }

    @Override
    public TransactionRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public TransactionRecord value2(Boolean value) {
        setExpense(value);
        return this;
    }

    @Override
    public TransactionRecord value3(LocalDate value) {
        setTransactionDate(value);
        return this;
    }

    @Override
    public TransactionRecord value4(String value) {
        setBankaccount(value);
        return this;
    }

    @Override
    public TransactionRecord value5(Double value) {
        setAmount(value);
        return this;
    }

    @Override
    public TransactionRecord value6(String value) {
        setReceiver(value);
        return this;
    }

    @Override
    public TransactionRecord value7(UUID value) {
        setTagId(value);
        return this;
    }

    @Override
    public TransactionRecord value8(UUID value) {
        setMatchingKeywordId(value);
        return this;
    }

    @Override
    public TransactionRecord value9(Boolean value) {
        setNeedUserAttention(value);
        return this;
    }

    @Override
    public TransactionRecord value10(String value) {
        setAlias(value);
        return this;
    }

    @Override
    public TransactionRecord value11(String value) {
        setNote(value);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    @Override
    public TransactionRecord value12(UUID value) {
        setUserId(value);
        return this;
    }

    @Override
    public TransactionRecord values(UUID value1, Boolean value2, LocalDate value3, String value4, Double value5, String value6, UUID value7,
        UUID value8, Boolean value9, String value10, String value11, UUID value12) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        return this;
    }
}
