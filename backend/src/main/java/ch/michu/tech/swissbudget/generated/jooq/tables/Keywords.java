/*
 * This file is generated by jOOQ.
 */
package ch.michu.tech.swissbudget.generated.jooq.tables;


import ch.michu.tech.swissbudget.generated.jooq.Keys;
import ch.michu.tech.swissbudget.generated.jooq.Public;
import ch.michu.tech.swissbudget.generated.jooq.tables.records.KeywordsRecord;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Keywords extends TableImpl<KeywordsRecord> {

    /**
     * The reference instance of <code>public.keywords</code>
     */
    public static final Keywords KEYWORDS = new Keywords();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>public.keywords.id</code>.
     */
    public final TableField<KeywordsRecord, Integer> ID = createField(DSL.name("id"),
        SQLDataType.INTEGER.nullable(false).identity(true), this, "");
    /**
     * The column <code>public.keywords.keyword</code>.
     */
    public final TableField<KeywordsRecord, String> KEYWORD = createField(DSL.name("keyword"),
        SQLDataType.VARCHAR(250).nullable(false), this, "");
    /**
     * The column <code>public.keywords.tag_id</code>.
     */
    public final TableField<KeywordsRecord, Integer> TAG_ID = createField(DSL.name("tag_id"),
        SQLDataType.INTEGER, this, "");
    /**
     * The column <code>public.keywords.user_id</code>.
     */
    public final TableField<KeywordsRecord, Integer> USER_ID = createField(DSL.name("user_id"),
        SQLDataType.INTEGER.nullable(false), this, "");
    private transient Tags _tags;
    private transient Users _users;

    private Keywords(Name alias, Table<KeywordsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Keywords(Name alias, Table<KeywordsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.keywords</code> table reference
     */
    public Keywords(String alias) {
        this(DSL.name(alias), KEYWORDS);
    }

    /**
     * Create an aliased <code>public.keywords</code> table reference
     */
    public Keywords(Name alias) {
        this(alias, KEYWORDS);
    }

    /**
     * Create a <code>public.keywords</code> table reference
     */
    public Keywords() {
        this(DSL.name("keywords"), null);
    }

    public <O extends Record> Keywords(Table<O> child, ForeignKey<O, KeywordsRecord> key) {
        super(child, key, KEYWORDS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KeywordsRecord> getRecordType() {
        return KeywordsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<KeywordsRecord, Integer> getIdentity() {
        return (Identity<KeywordsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<KeywordsRecord> getPrimaryKey() {
        return Keys.KEYWORDS_PKEY;
    }

    @Override
    public List<ForeignKey<KeywordsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.KEYWORDS__KEYWORDS_TAG_ID_FKEY,
            Keys.KEYWORDS__KEYWORDS_USER_ID_FKEY);
    }

    /**
     * Get the implicit join path to the <code>public.tags</code> table.
     */
    public Tags tags() {
        if (_tags == null) {
            _tags = new Tags(this, Keys.KEYWORDS__KEYWORDS_TAG_ID_FKEY);
        }

        return _tags;
    }

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null) {
            _users = new Users(this, Keys.KEYWORDS__KEYWORDS_USER_ID_FKEY);
        }

        return _users;
    }

    @Override
    public Keywords as(String alias) {
        return new Keywords(DSL.name(alias), this);
    }

    @Override
    public Keywords as(Name alias) {
        return new Keywords(alias, this);
    }

    @Override
    public Keywords as(Table<?> alias) {
        return new Keywords(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Keywords rename(String name) {
        return new Keywords(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Keywords rename(Name name) {
        return new Keywords(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Keywords rename(Table<?> name) {
        return new Keywords(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(
        Function4<? super Integer, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType,
        Function4<? super Integer, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
