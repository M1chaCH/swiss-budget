/*
 * This file is generated by jOOQ.
 */
package ch.michu.tech.swissbudget.generated.jooq.tables;


import ch.michu.tech.swissbudget.generated.jooq.Keys;
import ch.michu.tech.swissbudget.generated.jooq.Public;
import ch.michu.tech.swissbudget.generated.jooq.tables.records.TransactionMailsRecord;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TransactionMails extends TableImpl<TransactionMailsRecord> {

    /**
     * The reference instance of <code>public.transaction_mails</code>
     */
    public static final TransactionMails TRANSACTION_MAILS = new TransactionMails();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>public.transaction_mails.id</code>.
     */
    public final TableField<TransactionMailsRecord, Integer> ID = createField(DSL.name("id"),
        SQLDataType.INTEGER.nullable(false).identity(true), this, "");
    /**
     * The column <code>public.transaction_mails.message_number</code>.
     */
    public final TableField<TransactionMailsRecord, Integer> MESSAGE_NUMBER = createField(
        DSL.name("message_number"), SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>public.transaction_mails.from_mail</code>.
     */
    public final TableField<TransactionMailsRecord, String> FROM_MAIL = createField(
        DSL.name("from_mail"), SQLDataType.VARCHAR(250).nullable(false), this, "");
    /**
     * The column <code>public.transaction_mails.to_mail</code>.
     */
    public final TableField<TransactionMailsRecord, String> TO_MAIL = createField(
        DSL.name("to_mail"), SQLDataType.VARCHAR(250).nullable(false), this, "");
    /**
     * The column <code>public.transaction_mails.received_date</code>.
     */
    public final TableField<TransactionMailsRecord, LocalDate> RECEIVED_DATE = createField(
        DSL.name("received_date"), SQLDataType.LOCALDATE.nullable(false), this, "");
    /**
     * The column <code>public.transaction_mails.subject</code>.
     */
    public final TableField<TransactionMailsRecord, String> SUBJECT = createField(
        DSL.name("subject"), SQLDataType.VARCHAR(250).nullable(false), this, "");
    /**
     * The column <code>public.transaction_mails.raw_message</code>.
     */
    public final TableField<TransactionMailsRecord, String> RAW_MESSAGE = createField(
        DSL.name("raw_message"), SQLDataType.CLOB.nullable(false), this, "");
    /**
     * The column <code>public.transaction_mails.transaction_id</code>.
     */
    public final TableField<TransactionMailsRecord, Integer> TRANSACTION_ID = createField(
        DSL.name("transaction_id"), SQLDataType.INTEGER, this, "");
    /**
     * The column <code>public.transaction_mails.user_id</code>.
     */
    public final TableField<TransactionMailsRecord, Integer> USER_ID = createField(
        DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");
    private transient Transactions _transactions;
    private transient Users _users;

    private TransactionMails(Name alias, Table<TransactionMailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TransactionMails(Name alias, Table<TransactionMailsRecord> aliased,
        Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.transaction_mails</code> table reference
     */
    public TransactionMails(String alias) {
        this(DSL.name(alias), TRANSACTION_MAILS);
    }

    /**
     * Create an aliased <code>public.transaction_mails</code> table reference
     */
    public TransactionMails(Name alias) {
        this(alias, TRANSACTION_MAILS);
    }

    /**
     * Create a <code>public.transaction_mails</code> table reference
     */
    public TransactionMails() {
        this(DSL.name("transaction_mails"), null);
    }

    public <O extends Record> TransactionMails(Table<O> child,
        ForeignKey<O, TransactionMailsRecord> key) {
        super(child, key, TRANSACTION_MAILS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionMailsRecord> getRecordType() {
        return TransactionMailsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TransactionMailsRecord, Integer> getIdentity() {
        return (Identity<TransactionMailsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TransactionMailsRecord> getPrimaryKey() {
        return Keys.TRANSACTION_MAILS_PKEY;
    }

    @Override
    public List<ForeignKey<TransactionMailsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRANSACTION_MAILS__TRANSACTION_MAILS_TRANSACTION_ID_FKEY,
            Keys.TRANSACTION_MAILS__TRANSACTION_MAILS_USER_ID_FKEY);
    }

    /**
     * Get the implicit join path to the <code>public.transactions</code> table.
     */
    public Transactions transactions() {
        if (_transactions == null) {
            _transactions = new Transactions(this,
                Keys.TRANSACTION_MAILS__TRANSACTION_MAILS_TRANSACTION_ID_FKEY);
        }

        return _transactions;
    }

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null) {
            _users = new Users(this, Keys.TRANSACTION_MAILS__TRANSACTION_MAILS_USER_ID_FKEY);
        }

        return _users;
    }

    @Override
    public TransactionMails as(String alias) {
        return new TransactionMails(DSL.name(alias), this);
    }

    @Override
    public TransactionMails as(Name alias) {
        return new TransactionMails(alias, this);
    }

    @Override
    public TransactionMails as(Table<?> alias) {
        return new TransactionMails(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionMails rename(String name) {
        return new TransactionMails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionMails rename(Name name) {
        return new TransactionMails(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionMails rename(Table<?> name) {
        return new TransactionMails(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, String, String, LocalDate, String, String, Integer, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(
        Function9<? super Integer, ? super Integer, ? super String, ? super String, ? super LocalDate, ? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType,
        Function9<? super Integer, ? super Integer, ? super String, ? super String, ? super LocalDate, ? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
