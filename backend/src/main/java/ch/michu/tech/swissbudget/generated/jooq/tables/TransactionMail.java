/*
 * This file is generated by jOOQ.
 */
package ch.michu.tech.swissbudget.generated.jooq.tables;


import ch.michu.tech.swissbudget.generated.jooq.Keys;
import ch.michu.tech.swissbudget.generated.jooq.Public;
import ch.michu.tech.swissbudget.generated.jooq.tables.records.TransactionMailRecord;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TransactionMail extends TableImpl<TransactionMailRecord> {

    /**
     * The reference instance of <code>public.transaction_mail</code>
     */
    public static final TransactionMail TRANSACTION_MAIL = new TransactionMail();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>public.transaction_mail.user_id</code>.
     */
    public final TableField<TransactionMailRecord, String> USER_ID = createField(
        DSL.name("user_id"), SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>public.transaction_mail.id</code>.
     */
    public final TableField<TransactionMailRecord, Integer> ID = createField(DSL.name("id"),
        SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.transaction_mail.message_number</code>.
     */
    public final TableField<TransactionMailRecord, Integer> MESSAGE_NUMBER = createField(
        DSL.name("message_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.transaction_mail.from_mail</code>.
     */
    public final TableField<TransactionMailRecord, String> FROM_MAIL = createField(
        DSL.name("from_mail"), SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>public.transaction_mail.to_mail</code>.
     */
    public final TableField<TransactionMailRecord, String> TO_MAIL = createField(
        DSL.name("to_mail"), SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>public.transaction_mail.received_date</code>.
     */
    public final TableField<TransactionMailRecord, LocalDate> RECEIVED_DATE = createField(
        DSL.name("received_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.transaction_mail.subject</code>.
     */
    public final TableField<TransactionMailRecord, String> SUBJECT = createField(
        DSL.name("subject"), SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>public.transaction_mail.raw_message</code>.
     */
    public final TableField<TransactionMailRecord, String> RAW_MESSAGE = createField(
        DSL.name("raw_message"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.transaction_mail.transaction_id</code>.
     */
    public final TableField<TransactionMailRecord, Integer> TRANSACTION_ID = createField(
        DSL.name("transaction_id"), SQLDataType.INTEGER, this, "");
    private transient Transaction _transaction;
    private transient RegisteredUser _registeredUser;

    private TransactionMail(Name alias, Table<TransactionMailRecord> aliased) {
        this(alias, aliased, null);
    }

    private TransactionMail(Name alias, Table<TransactionMailRecord> aliased,
        Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.transaction_mail</code> table reference
     */
    public TransactionMail(String alias) {
        this(DSL.name(alias), TRANSACTION_MAIL);
    }

    /**
     * Create an aliased <code>public.transaction_mail</code> table reference
     */
    public TransactionMail(Name alias) {
        this(alias, TRANSACTION_MAIL);
    }

    /**
     * Create a <code>public.transaction_mail</code> table reference
     */
    public TransactionMail() {
        this(DSL.name("transaction_mail"), null);
    }

    public <O extends Record> TransactionMail(Table<O> child,
        ForeignKey<O, TransactionMailRecord> key) {
        super(child, key, TRANSACTION_MAIL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TransactionMailRecord, Integer> getIdentity() {
        return (Identity<TransactionMailRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TransactionMailRecord> getPrimaryKey() {
        return Keys.TRANSACTION_MAIL_PKEY;
    }

    @Override
    public List<ForeignKey<TransactionMailRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRANSACTION_MAIL__TRANSACTION_MAIL_TRANSACTION_ID_FKEY,
            Keys.TRANSACTION_MAIL__TRANSACTION_MAIL_USER_ID_FKEY);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionMailRecord> getRecordType() {
        return TransactionMailRecord.class;
    }

    /**
     * Get the implicit join path to the <code>public.transaction</code> table.
     */
    public Transaction transaction() {
        if (_transaction == null) {
            _transaction = new Transaction(this,
                Keys.TRANSACTION_MAIL__TRANSACTION_MAIL_TRANSACTION_ID_FKEY);
        }

        return _transaction;
    }

    /**
     * Get the implicit join path to the <code>public.registered_user</code> table.
     */
    public RegisteredUser registeredUser() {
        if (_registeredUser == null) {
            _registeredUser = new RegisteredUser(this,
                Keys.TRANSACTION_MAIL__TRANSACTION_MAIL_USER_ID_FKEY);
        }

        return _registeredUser;
    }

    @Override
    public TransactionMail as(String alias) {
        return new TransactionMail(DSL.name(alias), this);
    }

    @Override
    public TransactionMail as(Name alias) {
        return new TransactionMail(alias, this);
    }

    @Override
    public TransactionMail as(Table<?> alias) {
        return new TransactionMail(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionMail rename(String name) {
        return new TransactionMail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionMail rename(Name name) {
        return new TransactionMail(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionMail rename(Table<?> name) {
        return new TransactionMail(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, String, String, LocalDate, String, String, Integer, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(
        Function9<? super Integer, ? super Integer, ? super String, ? super String, ? super LocalDate, ? super String, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType,
        Function9<? super Integer, ? super Integer, ? super String, ? super String, ? super LocalDate, ? super String, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
